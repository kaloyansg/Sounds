Ето кратка обратна връзка:


Sound - Имаш много лош интерфейс. Ако един клас няма никакви виртуални методи не е разумно да има само виртуален деструктор (освен ако нямаш специална причина) - така взимаш по-лошото от двете. В конкретната задача е добре да имаш виртуален метод - оператор за индексиране, за да можеш така да реализираш различната логика за получаване на пробите, без да е нужно да съхраняваш масив от тях. В няколко от примерите съхранението на всички проби не е ефективно - тишината и повторението. Също така в Mix и Sequence може да съхраняваш масивите със звуци, вместо самите проби... Освен това при Playlist ще ти трябва контейнер от звуци, което предполага някой да се грижи за техния живот. Ако ще са полиморфна йерархия ще ти трябва и полиморфно клониране. А също и методи за тяхното копиране, което ти си забранил? Имаш някои const модификатори на странни (и ненужни) места. Добро решение е статична функция clip.

По имплементацията setSamples като достъпен отвън (protected) метод потенциално оставя обекта в неконсистентно състояние, а също допуска и теч на памет. В имплементацията на clip налагаш прекомерни изисквания към шаблонния тип. В конструкторът не валидираш параметрите и ще имаш теч на памет при проблем. Предвид, че както samples, така и amplitude могат да се променят след конструиране, от оператор [] не е коректен също.

Silence, Periodical, FromFile нямат най-ефективната имплементация, но се подчиняват на вече дефинирания интерфейс. При работа с файла нямаш добра валидация на операциите. За Mix и Sequence нямаш валидация на данните в конструктора.

Effect - тук няма логика от статична член-данна normalizingCoef, която да се задава в конструктора. Това противоречи на идеята за статичност. Също така с така подадения указател към функция не можеш да реализираш всички цитирани в условието ефекти. Отново няма валидация.

Playlist - Тотално некоректен жизнен цикъл на обект. Куп некоректни статични данни и функции. В конструкторът имаш прекалено много места, на които възникват необработени проблеми и като резултат ще имаш сериозни течове на памет. Операторът за индексиране на позволява промяната на звук, нямаш поисканият оператор за преобразуване, а някакъв друг, който също не е коректен като логика откъм работа с ресурси.

Като цяло има много сериозни пропуски в базови ООП концепции.
